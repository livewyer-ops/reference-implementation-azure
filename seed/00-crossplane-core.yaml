apiVersion: v1
kind: Namespace
metadata:
  name: crossplane-system
---
---
# Source: crossplane/charts/apollo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: apollo
  labels:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
    app.kubernetes.io/name: apollo-apollo
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.1"
    version: "0.1.1"
    helm.sh/chart: apollo-mxe-0.1.1
    app.kubernetes.io/managed-by: Helm
---
# Source: crossplane/charts/upbound/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: upbound-controller-manager
  namespace: crossplane-system
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
---
# Source: crossplane/charts/webui/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: webui
  labels:    
    app: webui
    chart: webui-1.0.0
    release: crossplane
    heritage: Helm
    version: 1.0.0
---
# Source: crossplane/templates/crossplane/rbac-manager-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rbac-manager
  namespace: crossplane-system
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
---
# Source: crossplane/templates/crossplane/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: crossplane
  namespace: crossplane-system
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
---
# Source: crossplane/templates/crossplane/secret.yaml
# The reason this is created empty and filled by the init container is we want
# to manage the lifecycle of the secret via Helm. This way whenever Crossplane
# is deleted, the secret is deleted as well.
apiVersion: v1
kind: Secret
metadata:
  name: crossplane-root-ca
  namespace: crossplane-system
type: Opaque
---
# Source: crossplane/templates/crossplane/secret.yaml
# The reason this is created empty and filled by the init container is we want
# to manage the lifecycle of the secret via Helm. This way whenever Crossplane
# is deleted, the secret is deleted as well.
apiVersion: v1
kind: Secret
metadata:
  name: crossplane-tls-server
  namespace: crossplane-system
type: Opaque
---
# Source: crossplane/templates/crossplane/secret.yaml
# The reason this is created empty and filled by the init container is we want
# to manage the lifecycle of the secret via Helm. This way whenever Crossplane
# is deleted, the secret is deleted as well.
apiVersion: v1
kind: Secret
metadata:
  name: crossplane-tls-client
  namespace: crossplane-system
type: Opaque
---
# Source: crossplane/templates/versions.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: upbound-crossplane-versions
  namespace: crossplane-system
  labels:
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
    app.kubernetes.io/managed-by: Helm
data:
  crossplaneVersion: 2.0.2-up.1
  uxpVersion: 2.0.2-up.4
  upboundControllerManagerVersion: "0.1.0-rc.0.240.ge5976e7"
  webUIVersion: "1.0.0"
  apolloVersion: "0.1.1"
---
# Source: crossplane/charts/upbound/templates/clusterrole-upbound-packages-to-crossplane.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-packages:aggregate-to-crossplane
  labels:
    rbac.crossplane.io/aggregate-to-crossplane: "true"
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - pkg.upbound.io
  resources:
    - addons
    - addons/status
    - addonrevisions
    - addonrevisions/status
    - addonruntimeconfigs
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
    - delete
    - deletecollection
---
# Source: crossplane/charts/upbound/templates/clusterrole-upboundruntime.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-crossplane:package-runtime-permissions
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - licensing.upbound.io
  resources:
    - licenses
  verbs:
    - get
    - list
- apiGroups:
    - ""
  resources:
    - nodes # License check may require access to nodes to validate cluster type
  verbs:
    - get
    - list
    - watch
- apiGroups: # TODO: these are a temporary workaround for Functions. xref https://github.com/crossplane/crossplane/issues/6663
    - ""
  resources:
    - secrets
  verbs:
    - get
    - list
- apiGroups:
    - ""
  resources:
    - events
  verbs:
    - create
---
# Source: crossplane/charts/upbound/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-controller-manager
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.crossplane.io/aggregate-to-crossplane: "true"
    - matchLabels:
        rbac.crossplane.io/aggregate-to-upbound-controller-manager: "true"
---
# Source: crossplane/charts/upbound/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-controller-manager:system:aggregate-to-upbound-controller-manager
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
    rbac.crossplane.io/aggregate-to-upbound-controller-manager: "true"
rules:
- apiGroups:
    - ""
  resources:
    - namespaces # addon package controllers (helm client) require access to namespaces
  verbs:
    - get
    - list
    - create
    - update
    - patch
- apiGroups:
    - ""
  resources:
    - serviceaccounts
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
    - delete
- apiGroups:
    - ""
  resources:
    - nodes # License check may require access to nodes to validate cluster type
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - autoscaling.k8s.io
  resources:
    - verticalpodautoscalers
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
    - delete
- apiGroups:
    - licensing.upbound.io
  resources:
    - licenses
    - licenses/status
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
- apiGroups:
    - pkg.upbound.io
  resources:
    - upboundruntimeconfigs
    - addons
    - addons/status
    - addonrevisions
    - addonrevisions/status
    - addonruntimeconfigs
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
- apiGroups:
    - admin.uxp.upbound.io
  resources:
    - backups
    - backups/status
    - restores
    - restores/status
    - backupconfigs
    - backupschedules
    - backupschedules/status
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
    - delete
- apiGroups:
    - cert-manager.io
  resources:
    - certificates
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - cert-manager.io
  resources:
    - certificates/status
  verbs:
    - get
- apiGroups:
    - serving.knative.dev
  resources:
    - revisions
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - serving.knative.dev
  resources:
    - revisions/status
    - services/status
  verbs:
    - get
- apiGroups:
    - serving.knative.dev
  resources:
    - services
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - apps
  resources:
    - statefulsets # licensing controller manages uxp-metering statefulset lifecycle
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ops.upbound.io
  resources:
    - analyses
    - remediations
    - remediationrequests
    - analyses/status
    - remediations/status
    - remediationrequests/status
  verbs:
    - get
    - list
    - create
    - update
    - patch
    - watch
# Needed by analysis controller for looking up involvedObjects (currently just
# looking at pods).
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - get
---
# Source: crossplane/charts/upbound/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-controller-manager:system:aggregate-to-admin
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
    rbac.crossplane.io/aggregate-to-admin: "true"
rules:
  - apiGroups:
      - licensing.upbound.io
    resources:
      - licenses
      - licenses/status
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
  - apiGroups:
      - pkg.upbound.io
    resources:
      - upboundruntimeconfigs
      - addons
      - addons/status
      - addonrevisions
      - addonrevisions/status
      - addonruntimeconfigs
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
  - apiGroups:
      - admin.uxp.upbound.io
    resources:
      - backups
      - backups/status
      - restores
      - restores/status
      - backupconfigs
      - backupschedules
      - backupschedules/status
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
      - delete
  - apiGroups:
      - ops.upbound.io
    resources:
      - analyses
      - remediations
      - remediationrequests
      - analyses/status
      - remediations/status
      - remediationrequests/status
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
---
# Source: crossplane/charts/upbound/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-controller-manager:system:aggregate-to-edit
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
    rbac.crossplane.io/aggregate-to-edit: "true"
rules:
  - apiGroups:
      - licensing.upbound.io
    resources:
      - licenses
      - licenses/status
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
  - apiGroups:
      - pkg.upbound.io
    resources:
      - upboundruntimeconfigs
      - addons
      - addons/status
      - addonrevisions
      - addonrevisions/status
      - addonruntimeconfigs
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
  - apiGroups:
      - admin.uxp.upbound.io
    resources:
      - backups
      - backups/status
      - restores
      - restores/status
      - backupconfigs
      - backupschedules
      - backupschedules/status
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
      - delete
  - apiGroups:
      - ops.upbound.io
    resources:
      - analyses
      - remediations
      - remediationrequests
      - analyses/status
      - remediations/status
      - remediationrequests/status
    verbs:
      - get
      - list
      - create
      - update
      - patch
      - watch
---
# Source: crossplane/charts/upbound/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: upbound-controller-manager:system:aggregate-to-view
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
    rbac.crossplane.io/aggregate-to-view: "true"
rules:
  - apiGroups:
      - licensing.upbound.io
    resources:
      - licenses
      - licenses/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - pkg.upbound.io
    resources:
      - upboundruntimeconfigs
      - addons
      - addons/status
      - addonrevisions
      - addonrevisions/status
      - addonruntimeconfigs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - admin.uxp.upbound.io
    resources:
      - backups
      - backups/status
      - restores
      - restores/status
      - backupconfigs
      - backupschedules
      - backupschedules/status
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ops.upbound.io
    resources:
      - analyses
      - remediations
      - remediationrequests
      - analyses/status
      - remediations/status
      - remediationrequests/status
    verbs:
      - get
      - list
      - watch
---
# Source: crossplane/templates/crossplane/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.crossplane.io/aggregate-to-crossplane: "true"
---
# Source: crossplane/templates/crossplane/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane:system:aggregate-to-crossplane
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
    crossplane.io/scope: "system"
    rbac.crossplane.io/aggregate-to-crossplane: "true"
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  - customresourcedefinitions/status
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - services
  verbs:
  - "*"
- apiGroups:
  - apiextensions.crossplane.io
  - ops.crossplane.io
  - pkg.crossplane.io
  - protection.crossplane.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - delete
  - watch
- apiGroups:
  - ""
  - coordination.k8s.io
  resources:
  - configmaps
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
---
# Source: crossplane/templates/crossplane/rbac-manager-allowed-provider-permissions.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane:allowed-provider-permissions
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.crossplane.io/aggregate-to-allowed-provider-permissions: "true"
---
# Source: crossplane/templates/crossplane/rbac-manager-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane-rbac-manager
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - apps
  resources:
    - deployments
  verbs:
    - get
    - list
    - watch
# The RBAC manager creates a series of RBAC roles for each namespace it sees.
# These RBAC roles are controlled (in the owner reference sense) by the namespace.
# The RBAC manager needs permission to set finalizers on Namespaces in order to
# create resources that block their deletion when the
# OwnerReferencesPermissionEnforcement admission controller is enabled.
# See https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
- apiGroups:
  - ""
  resources:
  - namespaces/finalizers
  verbs:
  - update
- apiGroups:
  - apiextensions.crossplane.io
  resources:
  - compositeresourcedefinitions
  verbs:
  - get
  - list
  - watch
# The RBAC manager creates a series of RBAC cluster roles for each XRD it sees.
# These cluster roles are controlled (in the owner reference sense) by the XRD.
# The RBAC manager needs permission to set finalizers on XRDs in order to
# create resources that block their deletion when the 
# OwnerReferencesPermissionEnforcement admission controller is enabled.
# See https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
- apiGroups:
  - apiextensions.crossplane.io
  resources:
  - compositeresourcedefinitions/finalizers
  verbs:
  - update
- apiGroups:
  - pkg.crossplane.io
  resources:
  - providerrevisions
  verbs:
  - get
  - list
  - watch
# The RBAC manager creates a series of RBAC cluster roles for each ProviderRevision
# it sees. These cluster roles are controlled (in the owner reference sense) by the
# ProviderRevision. The RBAC manager needs permission to set finalizers on
# ProviderRevisions in order to create resources that block their deletion when the 
# OwnerReferencesPermissionEnforcement admission controller is enabled.
# See https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
- apiGroups:
  - pkg.crossplane.io
  resources:
  - providerrevisions/finalizers
  verbs:
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  - roles
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  # The RBAC manager may grant access it does not have.
  - escalate
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - bind
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - "*"
- apiGroups:
  - ""
  - coordination.k8s.io
  resources:
  - configmaps
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - patch
  - watch
  - delete
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane-admin
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.crossplane.io/aggregate-to-admin: "true"
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane-edit
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.crossplane.io/aggregate-to-edit: "true"
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane-view
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.crossplane.io/aggregate-to-view: "true"
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane-browse
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.crossplane.io/aggregate-to-browse: "true"
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane:aggregate-to-admin
  labels:
    rbac.crossplane.io/aggregate-to-admin: "true"
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
rules:
# Crossplane administrators have access to view events.
- apiGroups: [""]
  resources: [events]
  verbs: [get, list, watch]
# Crossplane administrators must create provider credential secrets, and may
# need to read or otherwise interact with connection secrets. They may also need
# to create or annotate namespaces.
- apiGroups: [""]
  resources: [secrets, namespaces]
  verbs: ["*"]
# Crossplane administrators have access to view the roles that they may be able
# to grant to other subjects.
- apiGroups: [rbac.authorization.k8s.io]
  resources: [clusterroles, roles]
  verbs: [get, list, watch]
# Crossplane administrators have access to grant the access they have to other
# subjects.
- apiGroups: [rbac.authorization.k8s.io]
  resources: [clusterrolebindings, rolebindings]
  verbs: ["*"]
# Crossplane administrators have full access to built in Crossplane types.
- apiGroups:
  - apiextensions.crossplane.io
  resources: ["*"]
  verbs: ["*"]
- apiGroups:
  - pkg.crossplane.io
  resources: ["*"]
  verbs: ["*"]
- apiGroups:
  - secrets.crossplane.io
  resources: ["*"]
  verbs: ["*"]
# Crossplane administrators have access to view CRDs in order to debug XRDs.
- apiGroups: [apiextensions.k8s.io]
  resources: [customresourcedefinitions]
  verbs: [get, list, watch]
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane:aggregate-to-edit
  labels:
    rbac.crossplane.io/aggregate-to-edit: "true"
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
rules:
# Crossplane editors have access to view events.
- apiGroups: [""]
  resources: [events]
  verbs: [get, list, watch]
# Crossplane editors must create provider credential secrets, and may need to
# read or otherwise interact with connection secrets.
- apiGroups: [""]
  resources: [secrets]
  verbs: ["*"]
# Crossplane editors may see which namespaces exist, but not edit them.
- apiGroups: [""]
  resources: [namespaces]
  verbs: [get, list, watch]
# Crossplane editors have full access to built in Crossplane types.
- apiGroups:
  - apiextensions.crossplane.io
  resources: ["*"]
  verbs: ["*"]
- apiGroups:
  - pkg.crossplane.io
  resources: ["*"]
  verbs: ["*"]
- apiGroups:
  - secrets.crossplane.io
  resources: ["*"]
  verbs: ["*"]
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane:aggregate-to-view
  labels:
    rbac.crossplane.io/aggregate-to-view: "true"
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
rules:
# Crossplane viewers have access to view events.
- apiGroups: [""]
  resources: [events]
  verbs: [get, list, watch]
# Crossplane viewers may see which namespaces exist.
- apiGroups: [""]
  resources: [namespaces]
  verbs: [get, list, watch]
# Crossplane viewers have read-only access to built in Crossplane types.
- apiGroups:
  - apiextensions.crossplane.io
  resources: ["*"]
  verbs: [get, list, watch]
- apiGroups:
  - pkg.crossplane.io
  resources: ["*"]
  verbs: [get, list, watch]
- apiGroups:
  - secrets.crossplane.io
  resources: ["*"]
  verbs: [get, list, watch]
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crossplane:aggregate-to-browse
  labels:
    rbac.crossplane.io/aggregate-to-browse: "true"
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
rules:
# Crossplane browsers have access to view events.
- apiGroups: [""]
  resources: [events]
  verbs: [get, list, watch]
# Crossplane browsers have read-only access to compositions and XRDs. This
# allows them to discover and select an appropriate composition when creating a
# resource claim.
- apiGroups:
  - apiextensions.crossplane.io
  resources: ["*"]
  verbs: [get, list, watch]
---
# Source: crossplane/charts/apollo/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: apollo
  labels:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
    app.kubernetes.io/name: apollo-apollo
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.1"
    version: "0.1.1"
    helm.sh/chart: apollo-mxe-0.1.1
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: apollo
  namespace: crossplane-system
---
# Source: crossplane/charts/upbound/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: upbound-controller-manager
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: upbound-controller-manager
subjects:
- kind: ServiceAccount
  name: upbound-controller-manager
  namespace: crossplane-system
---
# Source: crossplane/charts/upbound/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: upbound-controller-as-rbac-manager
  labels:
    app: upbound
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crossplane-rbac-manager
subjects:
  - kind: ServiceAccount
    name: upbound-controller-manager
    namespace: crossplane-system
---
# Source: crossplane/templates/crossplane/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crossplane
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crossplane
subjects:
- kind: ServiceAccount
  name: crossplane
  namespace: crossplane-system
---
# Source: crossplane/templates/crossplane/rbac-manager-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crossplane-rbac-manager
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crossplane-rbac-manager
subjects:
- kind: ServiceAccount
  name: rbac-manager
  namespace: crossplane-system
---
# Source: crossplane/templates/crossplane/rbac-manager-managed-clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crossplane-admin
  labels:
    app: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crossplane-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: crossplane:masters
---
# Source: crossplane/charts/apollo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: crossplane-apollo-metrics
  labels:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
    app.kubernetes.io/name: apollo-apollo
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.1"
    version: "0.1.1"
    helm.sh/chart: apollo-mxe-0.1.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8085
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
---
# Source: crossplane/charts/apollo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spaces-apollo
  labels:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
    app.kubernetes.io/name: apollo-apollo
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.1"
    version: "0.1.1"
    helm.sh/chart: apollo-mxe-0.1.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: api
      protocol: TCP
      name: api
  selector:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
---
# Source: crossplane/charts/apollo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spaces-etcd
  namespace: kube-system
  labels:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
    app.kubernetes.io/name: apollo-apollo
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.1"
    version: "0.1.1"
    helm.sh/chart: apollo-mxe-0.1.1
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 2379
      targetPort: 2379
      protocol: TCP
      name: etcd
  selector:
    component: etcd
    tier: control-plane
---
# Source: crossplane/charts/upbound/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: upbound-controller-manager
  namespace: crossplane-system
  labels:
    app: upbound
    release: crossplane
spec:
  type: ClusterIP
  ports:
  - port: 8082
    targetPort: measurement
    protocol: TCP
    name: measurements
  selector:
    app: upbound
    release: crossplane
---
# Source: crossplane/charts/webui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: webui
  labels:    
    app: webui
    chart: webui-1.0.0
    release: crossplane
    heritage: Helm
    version: 1.0.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: webui
    release: crossplane
---
# Source: crossplane/templates/crossplane/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: crossplane-webhooks
  namespace: crossplane-system
  labels:
    app: crossplane
    release: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
  annotations:
spec:
  selector:
    app: crossplane
    release: crossplane
  ports:
  - protocol: TCP
    port: 9443
    targetPort: 9443
---
# Source: crossplane/charts/apollo/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crossplane-apollo
  labels:
    app: apollo-apollo
    release: crossplane
    mxe.upbound.io/component: control-plane
    app.kubernetes.io/name: apollo-apollo
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.1"
    version: "0.1.1"
    helm.sh/chart: apollo-mxe-0.1.1
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: apollo-apollo
      release: crossplane
      mxe.upbound.io/component: control-plane
  template:
    metadata:
      annotations:
      labels:
        app: apollo-apollo
        release: crossplane
        mxe.upbound.io/component: control-plane
        app.kubernetes.io/name: apollo-apollo
        app.kubernetes.io/instance: crossplane
        app.kubernetes.io/version: "0.1.1"
        version: "0.1.1"
    spec:
      serviceAccountName: apollo
      securityContext:
        fsGroup: 1000
      containers:
      - name: apollo-syncer
        image: "xpkg.upbound.io/upbound/uxp-apollo:v0.1.1"
        imagePullPolicy: IfNotPresent
        command:
          - uxp-apollo
          - syncer
          - sync
        args:
        - --metrics-port=8081
        - --postgres-url=postgres://postgres:postgres@localhost:5432/upbound
        env:
        - name: DEPLOYMENT_MODE
          value: "single-tenant"
        volumeMounts:
        - name: etc-ca-certificates
          mountPath: /etc/ca-certificates
          readOnly: true
        - name: shared-certs
          mountPath: /etc/kubernetes/pki
          readOnly: true
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
      - name: postgres
        image: 'postgres:14'
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          value: upbound
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        ports:
        - containerPort: 5432
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 30
          periodSeconds: 30
        lifecycle:
          preStop:
            exec:
              command: ["/usr/local/bin/pg_ctl", "stop", "-D", "/var/lib/postgresql/data", "-w", "-t", "60", "-m", "smart"]
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresdata
      - name: uxp-apollo
        securityContext:
          {}
        image: "xpkg.upbound.io/upbound/uxp-apollo:v0.1.1"
        imagePullPolicy: IfNotPresent
        command:
          - uxp-apollo
          - server
        args:
        - server
        - --postgres-url=postgres://postgres:postgres@localhost:5432/upbound
        ports:
        - name: metrics
          containerPort: 8085
          protocol: TCP
        - name: api
          containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: DEPLOYMENT_MODE
          value: "single-tenant"
        #
        # - name: PGUSER
        #   value: crossplane-controller
        # # - name: PGPASSWORD
        # #   valueFrom:
        # #     secretKeyRef:
        # #       name: crossplane-apollo-pg-app
        # #       key: password
        #
        #
        # - name: PGSSLROOTCERT
        #   value: /etc/upbound/postgres/ca/ca.crt
        #
        #   TODO(RedbackThomson): Configure the SPACE_API_* environment
        #   variables as extraEnv when running in cloud.
        # - name: SPACE_API_PORT
        #   value: .Values.api.proxy.service.api.port
        # - name: SPACE_API_INSECURE
        #   value: .Values.api.insecure
        resources:
          limits:
            cpu: 1000m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        #
        #
        # - name: uxp-apollo-postgres-ca
        #   mountPath: /etc/upbound/postgres/ca
        #   readOnly: true
        #
      volumes:
      #
      - name: postgresdata
        emptyDir: {}
      - name: etc-ca-certificates
        hostPath:
          path: /etc/ca-certificates
          type: DirectoryOrCreate
      - name: k8s-certs
        hostPath:
          path: /etc/kubernetes/pki
          type: DirectoryOrCreate
      - name: shared-certs
        emptyDir: {}
---
# Source: crossplane/charts/upbound/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: upbound-controller-manager
  namespace: crossplane-system
  labels:
    app: upbound
    release: crossplane
    helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
    app.kubernetes.io/name: upbound
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: upbound
      release: crossplane
  template:
    metadata:
      labels:
        app: upbound
        release: crossplane
        helm.sh/chart: upbound-0.1.0-rc.0.240.ge5976e7
        app.kubernetes.io/name: upbound
        app.kubernetes.io/instance: crossplane
        app.kubernetes.io/version: "0.1.0-rc.0.240.ge5976e7"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: upbound-controller-manager
      initContainers:
      - image: "xpkg.upbound.io/upbound/controller-manager:v0.1.0-rc.0.240.ge5976e7"
        args:
        - initialize
        imagePullPolicy: IfNotPresent
        name: initialize-crds
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsUser: 65532
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
      containers:
      - image: "xpkg.upbound.io/upbound/controller-manager:v0.1.0-rc.0.240.ge5976e7"
        args:
        - manager
        imagePullPolicy: IfNotPresent
        name: upbound
        resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
        startupProbe:
          failureThreshold: 30
          periodSeconds: 2
          tcpSocket:
            port: readyz
        ports:
        - name: readyz
          containerPort: 8081
        - name: measurement
          containerPort: 8082
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsUser: 65532
        env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: upbound
                resource: limits.cpu
                divisor: "1"
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: upbound
                resource: limits.memory
                divisor: "1"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: CROSSPLANE_VERSION
            valueFrom:
              configMapKeyRef:
                name: "upbound-crossplane-versions"
                key: "crossplaneVersion"
          - name: LEADER_ELECTION
            value: "true"
          - name: METERING_MANIFEST
            value: YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBTdGF0ZWZ1bFNldAptZXRhZGF0YToKICBuYW1lOiB1eHAtbWV0ZXJpbmcKICBuYW1lc3BhY2U6IGNyb3NzcGxhbmUtc3lzdGVtCiAgbGFiZWxzOgogICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZTogdXhwLW1ldGVyaW5nCiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IG1ldGVyaW5nCiAgICBhcHAua3ViZXJuZXRlcy5pby9tYW5hZ2VkLWJ5OiB1cGJvdW5kLWNvbnRyb2xsZXItbWFuYWdlcgpzcGVjOgogIHJlcGxpY2FzOiAxCiAgc2VydmljZU5hbWU6IHV4cC1tZXRlcmluZwogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IHV4cC1tZXRlcmluZwogICAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IG1ldGVyaW5nCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IHV4cC1tZXRlcmluZwogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogbWV0ZXJpbmcKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogbWV0ZXJpbmcKICAgICAgICBpbWFnZTogInhwa2cudXBib3VuZC5pby91cGJvdW5kL2NvbnRyb2xsZXItbWFuYWdlcjp2MC4xLjAtcmMuMC4yNDAuZ2U1OTc2ZTciCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gbWV0ZXJpbmcKICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgICBsaW1pdHM6CiAgICAgICAgICAgIGNwdTogNTAwbQogICAgICAgICAgICBtZW1vcnk6IDEwMjRNaQogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogNTBtCiAgICAgICAgICAgIG1lbW9yeTogMTI4TWkKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAtIG1vdW50UGF0aDogL2RhdGEvbWV0ZXJpbmcKICAgICAgICAgICAgbmFtZTogbWV0ZXJpbmctc3RvcmFnZQogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgc2VydmljZUFjY291bnROYW1lOiB1cGJvdW5kLWNvbnRyb2xsZXItbWFuYWdlciAjIFRPRE8obHN2aWJlbik6IGNyZWF0ZSBvd24gc2VydmljZSBhY2NvdW50CiAgdm9sdW1lQ2xhaW1UZW1wbGF0ZXM6CiAgICAtIG1ldGFkYXRhOgogICAgICAgIG5hbWU6IG1ldGVyaW5nLXN0b3JhZ2UKICAgICAgc3BlYzoKICAgICAgICBhY2Nlc3NNb2RlczoKICAgICAgICAgIC0gUmVhZFdyaXRlT25jZQogICAgICAgIHJlc291cmNlczoKICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICBzdG9yYWdlOiAxMEdp
        volumeMounts:
          - mountPath: /cache/xpkg
            name: package-cache
          - mountPath: /cache/backups
            name: backup-cache
      volumes:
      - name: package-cache
        emptyDir:
          medium: 
          sizeLimit: 20Mi
      - name: backup-cache
        emptyDir:
          medium: 
          sizeLimit: 20Mi
---
# Source: crossplane/charts/webui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webui
  labels:
    repository: upbound-frontend    
    app: webui
    chart: webui-1.0.0
    release: crossplane
    heritage: Helm
    version: 1.0.0
spec:
  selector:
    matchLabels:
      app: webui
      release: crossplane
  replicas: 1
  template:
    metadata:
      labels:
        app: webui
        release: crossplane
        version: 1.0.0
    spec:
      serviceAccountName: webui
      containers:
        - name: webui-nginx
          image: "xpkg.upbound.io/upbound/uxp-webui-nginx:v1.0.0"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8081
              protocol: TCP
          env:
            - name: CONTROL_PLANE_NAME
              value: "crossplane"
            - name: QUERY_API_ENDPOINT
              value: "http://spaces-apollo.crossplane-system.svc.cluster.local:8080/apis/query.spaces.upbound.io/v1alpha2/namespaces/default/queries"
            - name: NAMESERVER
              value: "kube-dns.kube-system.svc.cluster.local"
          livenessProbe:
            httpGet:
              path: /health
              port: admin
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: admin
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 100m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 32Mi
---
# Source: crossplane/templates/crossplane/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crossplane
  namespace: crossplane-system
  labels:
    app: crossplane
    release: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crossplane
      release: crossplane
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: crossplane
        release: crossplane        
        helm.sh/chart: crossplane-2.0.2-up.4
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: cloud-infrastructure-controller
        app.kubernetes.io/part-of: crossplane
        app.kubernetes.io/name: crossplane
        app.kubernetes.io/instance: crossplane
        app.kubernetes.io/version: "2.0.2-up.4"
    spec:
      serviceAccountName: crossplane
      hostNetwork: false
      initContainers:
        - name: crossplane-init
          image: "xpkg.upbound.io/upbound/crossplane:v2.0.2-up.1"
          imagePullPolicy: IfNotPresent
          args:
          - core
          - init
          - --activation
          - "*"
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsUser: 65532
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: crossplane-init
                resource: limits.cpu
                divisor: "1"
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: crossplane-init
                resource: limits.memory
                divisor: "1"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: "WEBHOOK_SERVICE_NAME"
            value: crossplane-webhooks
          - name: "WEBHOOK_SERVICE_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: "WEBHOOK_SERVICE_PORT"
            value: "9443"
          - name: "TLS_CA_SECRET_NAME"
            value: crossplane-root-ca
          - name: "TLS_SERVER_SECRET_NAME"
            value: crossplane-tls-server
          - name: "TLS_CLIENT_SECRET_NAME"
            value: crossplane-tls-client
      containers:
      - name: crossplane
        image: "xpkg.upbound.io/upbound/crossplane:v2.0.2-up.1"
        args:
        - core
        - start
        - --enable-operations
        - --package-runtime=External
        imagePullPolicy: IfNotPresent
        resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 256Mi
        startupProbe:
          failureThreshold: 30
          periodSeconds: 2
          tcpSocket:
            port: readyz
        ports:
        - name: readyz
          containerPort: 8081
        - name: webhooks
          containerPort: 9443
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsUser: 65532
        env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: crossplane
                resource: limits.cpu
                divisor: "1"
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: crossplane
                resource: limits.memory
                divisor: "1"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
          - name: LEADER_ELECTION
            value: "true"
          - name: "TLS_SERVER_SECRET_NAME"
            value: crossplane-tls-server
          - name: "TLS_SERVER_CERTS_DIR"
            value: /tls/server
          - name: "TLS_CLIENT_SECRET_NAME"
            value: crossplane-tls-client
          - name: "TLS_CLIENT_CERTS_DIR"
            value: /tls/client
        volumeMounts:
          - mountPath: /cache/xpkg
            name: package-cache
          - mountPath: /cache/xfn
            name: function-cache
          - mountPath: /tls/server
            name: tls-server-certs
          - mountPath: /tls/client
            name: tls-client-certs
      volumes:
      - name: package-cache
        emptyDir:
          medium: 
          sizeLimit: 20Mi
      - name: function-cache
        emptyDir:
          medium: 
          sizeLimit: 512Mi
      - name: tls-server-certs
        secret:
          secretName: crossplane-tls-server
      - name: tls-client-certs
        secret:
          secretName: crossplane-tls-client
---
# Source: crossplane/templates/crossplane/rbac-manager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crossplane-rbac-manager
  namespace: crossplane-system
  labels:
    app: crossplane-rbac-manager
    release: crossplane    
    helm.sh/chart: crossplane-2.0.2-up.4
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: cloud-infrastructure-controller
    app.kubernetes.io/part-of: crossplane
    app.kubernetes.io/name: crossplane
    app.kubernetes.io/instance: crossplane
    app.kubernetes.io/version: "2.0.2-up.4"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crossplane-rbac-manager
      release: crossplane
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: crossplane-rbac-manager
        release: crossplane        
        helm.sh/chart: crossplane-2.0.2-up.4
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: cloud-infrastructure-controller
        app.kubernetes.io/part-of: crossplane
        app.kubernetes.io/name: crossplane
        app.kubernetes.io/instance: crossplane
        app.kubernetes.io/version: "2.0.2-up.4"
    spec:
      serviceAccountName: rbac-manager
      initContainers:
      - name: crossplane-init
        image: "xpkg.upbound.io/upbound/crossplane:v2.0.2-up.1"
        args:
        - rbac
        - init
        imagePullPolicy: IfNotPresent
        resources:
            limits:
              cpu: 100m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsUser: 65532
        env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: crossplane-init
                resource: limits.cpu
                divisor: "1"
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: crossplane-init
                resource: limits.memory
                divisor: "1"
      containers:
      - name: crossplane
        image: "xpkg.upbound.io/upbound/crossplane:v2.0.2-up.1"
        args:
        - rbac
        - start
        - --provider-clusterrole=crossplane:allowed-provider-permissions
        imagePullPolicy: IfNotPresent
        resources:
            limits:
              cpu: 100m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsUser: 65532
        env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: crossplane
                resource: limits.cpu
                divisor: "1"
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: crossplane
                resource: limits.memory
                divisor: "1"
          - name: LEADER_ELECTION
            value: "true"
