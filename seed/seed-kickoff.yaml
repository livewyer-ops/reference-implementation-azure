apiVersion: v1
kind: Namespace
metadata:
  name: crossplane-system
---
apiVersion: v1
kind: Namespace
metadata:
  name: seed-system
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-azure
spec:
  package: xpkg.upbound.io/upbound/provider-azure:v0.30.0
  packagePullPolicy: IfNotPresent
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-helm
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-helm:v1.0.2
  packagePullPolicy: IfNotPresent
---
apiVersion: pkg.crossplane.io/v1beta1
kind: Function
metadata:
  name: function-patch-and-transform
spec:
  package: xpkg.upbound.io/crossplane-contrib/function-patch-and-transform:v0.5.0
  packagePullPolicy: IfNotPresent
---
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: seedinfrastructures.platform.livewyer.io
spec:
  group: platform.livewyer.io
  names:
    kind: SeedInfrastructure
    plural: seedinfrastructures
  claimNames:
    kind: SeedInfrastructureClaim
    plural: seedinfrastructureclaims
  defaultCompositionRef:
    name: seed-infrastructure
  versions:
    - name: v1alpha1
      served: true
      referenceable: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                parameters:
                  type: object
                  properties:
                    domain:
                      type: string
                    resourceGroup:
                      type: string
                    keyVaultName:
                      type: string
                    location:
                      type: string
                    tenantId:
                      type: string
                    clientId:
                      type: string
                    clientSecret:
                      type: string
                    subscriptionId:
                      type: string
                    clusterName:
                      type: string
                    clusterOidcIssuerUrl:
                      type: string
                    wildcardAddress:
                      type: string
                      default: 127.0.0.1
                    configSecretName:
                      type: string
                      default: cnoe-config
                    clusterConnectionSecretName:
                      type: string
                      default: cnoe-kubeconfig
                    repoUrl:
                      type: string
                    repoRevision:
                      type: string
                    repoBasePath:
                      type: string
                    pathRouting:
                      type: string
                      default: "false"
                    letsencryptEnv:
                      type: string
                      default: prod
                    githubAppId:
                      type: string
                    githubAppInstallationId:
                      type: string
                    githubOrgUrl:
                      type: string
                    githubClientId:
                      type: string
                    githubClientSecret:
                      type: string
                    githubWebhookUrl:
                      type: string
                    githubWebhookSecret:
                      type: string
                    githubPrivateKey:
                      type: string
                    appsetChartRepository:
                      type: string
                    appsetChartName:
                      type: string
                    appsetChartVersion:
                      type: string
                  required:
                    - domain
                    - resourceGroup
                    - keyVaultName
                    - location
                    - tenantId
                    - clientId
                    - clientSecret
                    - subscriptionId
                    - clusterName
                    - clusterOidcIssuerUrl
                    - repoUrl
                    - repoRevision
                    - repoBasePath
                    - githubAppId
                    - githubAppInstallationId
                    - githubOrgUrl
                    - githubClientId
                    - githubClientSecret
                    - appsetChartRepository
                    - appsetChartName
                    - appsetChartVersion
              required:
                - parameters
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: seed-infrastructure
spec:
  compositeTypeRef:
    apiVersion: platform.livewyer.io/v1alpha1
    kind: SeedInfrastructure
  mode: Pipeline
  pipeline:
    - step: render
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: ResourcesConfiguration
        resources:
          - name: dnsWildcard
            base:
              apiVersion: network.azure.upbound.io/v1beta1
              kind: DNSARecord
              metadata:
                annotations:
                  crossplane.io/external-name: "*"
              spec:
                providerConfigRef:
                  name: azure-default
                forProvider:
                  ttl: 3600
                  records:
                    - 127.0.0.1
                  resourceGroupName: ""
                  zoneName: ""
            patches:
              - type: CombineFromComposite
                combine:
                  variables:
                    - fromFieldPath: spec.parameters.clusterName
                  strategy: string
                  string:
                    fmt: "%s-wildcard"
                toFieldPath: metadata.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.domain
                toFieldPath: metadata.annotations[cnoe.io/domain]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.resourceGroup
                toFieldPath: spec.forProvider.resourceGroupName
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.domain
                toFieldPath: spec.forProvider.zoneName
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.wildcardAddress
                toFieldPath: spec.forProvider.records[0]
          - name: keyVault
            base:
              apiVersion: keyvault.azure.upbound.io/v1beta1
              kind: Vault
              metadata:
                annotations:
                  crossplane.io/external-name: ""
              spec:
                providerConfigRef:
                  name: azure-default
                forProvider:
                  enableRbacAuthorization: true
                  skuName: standard
                  softDeleteRetentionDays: 7
                  resourceGroupName: ""
                  location: ""
                  tenantId: ""
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.keyVaultName
                toFieldPath: metadata.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.keyVaultName
                toFieldPath: metadata.annotations[cnoe.io/keyvault]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.keyVaultName
                toFieldPath: metadata.annotations[crossplane.io/external-name]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.resourceGroup
                toFieldPath: spec.forProvider.resourceGroupName
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.location
                toFieldPath: spec.forProvider.location
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.tenantId
                toFieldPath: spec.forProvider.tenantId
          - name: cnoeConfigSecret
            base:
              apiVersion: v1
              kind: Secret
              metadata:
                name: cnoe-config
                namespace: crossplane-system
              type: Opaque
              stringData:
                config.json: ""
            readinessChecks:
              - type: NonEmpty
                fieldPath: metadata.uid
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.configSecretName
                toFieldPath: metadata.name
              - type: CombineFromComposite
                combine:
                  variables:
                    - fromFieldPath: spec.parameters.repoUrl
                    - fromFieldPath: spec.parameters.repoRevision
                    - fromFieldPath: spec.parameters.repoBasePath
                    - fromFieldPath: spec.parameters.clusterName
                    - fromFieldPath: spec.parameters.subscriptionId
                    - fromFieldPath: spec.parameters.location
                    - fromFieldPath: spec.parameters.resourceGroup
                    - fromFieldPath: spec.parameters.domain
                    - fromFieldPath: spec.parameters.keyVaultName
                    - fromFieldPath: spec.parameters.pathRouting
                    - fromFieldPath: spec.parameters.letsencryptEnv
                    - fromFieldPath: spec.parameters.githubAppId
                    - fromFieldPath: spec.parameters.githubAppInstallationId
                    - fromFieldPath: spec.parameters.githubOrgUrl
                    - fromFieldPath: spec.parameters.githubClientId
                    - fromFieldPath: spec.parameters.githubClientSecret
                    - fromFieldPath: spec.parameters.githubWebhookUrl
                    - fromFieldPath: spec.parameters.githubWebhookSecret
                    - fromFieldPath: spec.parameters.clientId
                    - fromFieldPath: spec.parameters.tenantId
                    - fromFieldPath: spec.parameters.clusterOidcIssuerUrl
                  strategy: string
                  string:
                    fmt: '{"repo":{"url":"%s","revision":"%s","basepath":"%s"},"cluster_name":"%s","subscription":"%s","location":"%s","resource_group":"%s","domain":"%s","keyvault":"%s","path_routing":"%s","letsencrypt_env":"%s","github":{"appId":"%s","installationId":"%s","orgURL":"%s","clientId":"%s","clientSecret":"%s","webhookUrl":"%s","webhookSecret":"%s"},"crossplane_workload_identity":{"clientId":"%s","tenantId":"%s"},"cluster_oidc_issuer_url":"%s"}'
                toFieldPath: stringData[config.json]
          - name: azureServicePrincipalSecret
            base:
              apiVersion: v1
              kind: Secret
              metadata:
                name: azure-service-principal
                namespace: crossplane-system
              type: Opaque
              stringData:
                credentials: ""
            readinessChecks:
              - type: NonEmpty
                fieldPath: metadata.uid
            patches:
              - type: CombineFromComposite
                combine:
                  variables:
                    - fromFieldPath: spec.parameters.clientId
                    - fromFieldPath: spec.parameters.clientSecret
                    - fromFieldPath: spec.parameters.tenantId
                    - fromFieldPath: spec.parameters.subscriptionId
                  strategy: string
                  string:
                    fmt: '{"clientId":"%s","clientSecret":"%s","tenantId":"%s","subscriptionId":"%s"}'
                toFieldPath: stringData.credentials
          - name: providerConfigAzure
            base:
              apiVersion: azure.upbound.io/v1beta1
              kind: ProviderConfig
              metadata:
                name: azure-default
              spec:
                subscriptionID: ""
                tenantID: ""
                clientID: ""
                credentials:
                  source: Secret
                  secretRef:
                    namespace: crossplane-system
                    name: azure-service-principal
                    key: credentials
            readinessChecks:
              - type: NonEmpty
                fieldPath: metadata.uid
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.subscriptionId
                toFieldPath: spec.subscriptionID
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.tenantId
                toFieldPath: spec.tenantID
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clientId
                toFieldPath: spec.clientID
          - name: providerConfigHelm
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: ProviderConfig
              metadata:
                name: remote-aks
              spec:
                credentials:
                  source: Secret
                  secretRef:
                    namespace: crossplane-system
                    name: ""
                    key: kubeconfig
            readinessChecks:
              - type: NonEmpty
                fieldPath: metadata.uid
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterConnectionSecretName
                toFieldPath: spec.credentials.secretRef.name
          - name: argocdRelease
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                name: argocd
                namespace: crossplane-system
              spec:
                providerConfigRef:
                  name: remote-aks
                forProvider:
                  namespace: argocd
                  chart:
                    name: argo-cd
                    repository: https://argoproj.github.io/argo-helm
                    version: 8.0.14
                  values:
                    server:
                      ingress:
                        enabled: true
                        hostname: argocd.local
                    extraObjects:
                      - apiVersion: v1
                        kind: Secret
                        type: Opaque
                        metadata:
                          name: cnoe
                          labels:
                            argocd.argoproj.io/secret-type: cluster
                            environment: control-plane
                          annotations:
                            addonsRepoURL: ""
                            addonsRepoRevision: ""
                            addonsRepoBasepath: ""
                            subscription: ""
                            location: ""
                            resourceGroup: ""
                            tenantId: ""
                            clusterName: ""
                            clusterOIDCIssuerURL: ""
                            domain: ""
                            keyvault: ""
                            pathRouting: ""
                            environment: control-plane
                            crossplaneClientId: ""
                            crossplaneTenantId: ""
                            letsencryptEnv: ""
                        stringData:
                          name: ""
                          server: https://kubernetes.default.svc
                      - apiVersion: v1
                        kind: Secret
                        type: Opaque
                        metadata:
                          name: github-app-org
                          labels:
                            argocd.argoproj.io/secret-type: repo-creds
                        stringData:
                          type: git
                          url: ""
                          githubAppID: ""
                          githubAppInstallationID: ""
                          githubClientID: ""
                          githubClientSecret: ""
                          githubWebhookURL: ""
                          githubWebhookSecret: ""
                          githubAppPrivateKey: ""
            patches:
              - type: CombineFromComposite
                combine:
                  variables:
                    - fromFieldPath: spec.parameters.domain
                  strategy: string
                  string:
                    fmt: "argocd.local.%s"
                toFieldPath: spec.forProvider.values.server.ingress.hostname
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoUrl
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[addonsRepoURL]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoRevision
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[addonsRepoRevision]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoBasePath
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[addonsRepoBasepath]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.subscriptionId
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[subscription]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.location
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[location]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.resourceGroup
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[resourceGroup]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.tenantId
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[tenantId]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterName
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[clusterName]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterOidcIssuerUrl
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[clusterOIDCIssuerURL]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.domain
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[domain]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.keyVaultName
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[keyvault]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.pathRouting
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[pathRouting]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.letsencryptEnv
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[letsencryptEnv]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clientId
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[crossplaneClientId]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.tenantId
                toFieldPath: spec.forProvider.values.extraObjects[0].metadata.annotations[crossplaneTenantId]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterName
                toFieldPath: spec.forProvider.values.extraObjects[0].stringData.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoUrl
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.url
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubAppId
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubAppID
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubAppInstallationId
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubAppInstallationID
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubClientId
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubClientID
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubClientSecret
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubClientSecret
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubWebhookUrl
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubWebhookURL
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubWebhookSecret
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubWebhookSecret
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.githubPrivateKey
                toFieldPath: spec.forProvider.values.extraObjects[1].stringData.githubAppPrivateKey
          - name: appsetRelease
            base:
              apiVersion: helm.crossplane.io/v1beta1
              kind: Release
              metadata:
                name: cnoe-appsets
                namespace: crossplane-system
              spec:
                providerConfigRef:
                  name: remote-aks
                forProvider:
                  namespace: argocd
                  chart:
                    name: ""
                    repository: ""
                    version: ""
                  values:
                    argocd:
                      enabled: true
                      chartName: argo-cd
                      namespace: argocd
                      releaseName: argocd
                      defaultVersion: "8.0.14"
                      chartRepository: https://argoproj.github.io/argo-helm
                      valuesObject:
                        global:
                          domain: '{{ if eq .metadata.annotations.pathRouting "true" }}{{ .metadata.annotations.domain }}{{ else }}argocd.{{ .metadata.annotations.domain }}{{ end }}'
                        server:
                          ingress:
                            annotations:
                              cert-manager.io/cluster-issuer: '{{ if eq .metadata.annotations.pathRouting "false" }}letsencrypt-{{ .metadata.annotations.letsencryptEnv }}{{ end }}'
                            path: '/{{ if eq .metadata.annotations.pathRouting "true" }}argocd{{ end }}'
                        configs:
                          cm:
                            oidc.config: |
                              name: Keycloak
                              issuer: https://{{ if eq .metadata.annotations.pathRouting "false" }}keycloak.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}/keycloak{{ end }}/realms/cnoe
                              clientID: argocd
                              enablePKCEAuthentication: true
                              requestedScopes:
                                - openid
                                - profile
                                - email
                                - groups
                          params:
                            server.basehref: '/{{ if eq .metadata.annotations.pathRouting "true" }}argocd{{ end }}'
                            server.rootpath: '{{ if eq .metadata.annotations.pathRouting "true" }}argocd{{ end }}'
                      additionalResources:
                        - manifestPath: manifests
                          type: manifests
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane-bootstrap
                              - control-plane
                    crossplane:
                      enabled: true
                      chartName: crossplane
                      namespace: crossplane-system
                      releaseName: crossplane
                      defaultVersion: "2.0.2-up.4"
                      chartRepository: https://charts.upbound.io/stable
                      valuesObject:
                        customLabels:
                          azure.workload.identity/use: "true"
                        serviceAccount:
                          customAnnotations:
                            azure.workload.identity/client-id: "{{ .metadata.annotations.crossplaneClientId }}"
                            azure.workload.identity/tenant-id: "{{ .metadata.annotations.crossplaneTenantId }}"
                        extraObjects:
                          - apiVersion: azure.m.upbound.io/v1beta1
                            kind: ClusterProviderConfig
                            metadata:
                              name: default
                              annotations:
                                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                            spec:
                              credentials:
                                source: OIDCTokenFile
                              oidcTokenFilePath: /var/run/secrets/azure/tokens/azure-identity-token
                              subscriptionID: "{{ .metadata.annotations.subscription }}"
                              clientID: "{{ .metadata.annotations.crossplaneClientId }}"
                              tenantID: "{{ .metadata.annotations.crossplaneTenantId }}"
                          - apiVersion: azure.livewyer.io/v1alpha1
                            kind: WorkloadIdentity
                            metadata:
                              name: external-dns
                              namespace: external-dns
                              annotations:
                                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                            spec:
                              forProvider:
                                location: "{{ .metadata.annotations.location }}"
                                oidcIssuerURL: "{{ .metadata.annotations.clusterOIDCIssuerURL }}"
                                resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"
                                roleAssignments:
                                  - roleDefinitionName: DNS Zone Contributor
                                    scope: "/subscriptions/{{ .metadata.annotations.subscription }}/resourceGroups/{{ .metadata.annotations.resourceGroup }}/providers/Microsoft.Network/dnszones/{{ .metadata.annotations.domain }}"
                                serviceAccountName: external-dns
                          - apiVersion: azure.livewyer.io/v1alpha1
                            kind: WorkloadIdentity
                            metadata:
                              name: external-secrets
                              namespace: external-secrets
                              annotations:
                                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                            spec:
                              forProvider:
                                location: "{{ .metadata.annotations.location }}"
                                oidcIssuerURL: "{{ .metadata.annotations.clusterOIDCIssuerURL }}"
                                resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"
                                roleAssignments:
                                  - roleDefinitionName: Key Vault Administrator
                                    scope: "/subscriptions/{{ .metadata.annotations.subscription }}/resourceGroups/{{ .metadata.annotations.resourceGroup }}/providers/Microsoft.KeyVault/vaults/{{ .metadata.annotations.keyvault }}"
                                serviceAccountName: workload-identity-sa
                          - apiVersion: azure.livewyer.io/v1alpha1
                            kind: WorkloadIdentity
                            metadata:
                              name: keycloak
                              namespace: keycloak
                              annotations:
                                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                            spec:
                              forProvider:
                                location: "{{ .metadata.annotations.location }}"
                                oidcIssuerURL: "{{ .metadata.annotations.clusterOIDCIssuerURL }}"
                                resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"
                                roleAssignments:
                                  - roleDefinitionName: Key Vault Administrator
                                    scope: "/subscriptions/{{ .metadata.annotations.subscription }}/resourceGroups/{{ .metadata.annotations.resourceGroup }}/providers/Microsoft.KeyVault/vaults/{{ .metadata.annotations.keyvault }}"
                                serviceAccountName: keycloak-sa
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    ingress-nginx:
                      enabled: true
                      chartName: ingress-nginx
                      namespace: ingress-nginx
                      releaseName: ingress-nginx
                      defaultVersion: "4.7.0"
                      chartRepository: https://kubernetes.github.io/ingress-nginx
                      valuesObject:
                        controller:
                          kind: DaemonSet
                          extraArgs:
                            report-node-internal-ip-address: true
                          ingressClassResource:
                            default: true
                          watchIngressWithoutClass: true
                          service:
                            type: ClusterIP
                          hostPort:
                            enabled: true
                            ports:
                              http: 80
                              https: 443
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    external-dns:
                      enabled: true
                      releaseName: external-dns
                      namespace: external-dns
                      chartName: external-dns
                      chartRepository: https://kubernetes-sigs.github.io/external-dns
                      defaultVersion: "1.16.1"
                      valuesObject:
                        provider:
                          name: azure
                        domainFilters:
                          - "{{ .metadata.annotations.domain }}"
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    external-secrets:
                      enabled: true
                      chartName: external-secrets
                      namespace: external-secrets
                      releaseName: external-secrets
                      defaultVersion: "0.17.0"
                      chartRepository: https://charts.external-secrets.io
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    cert-manager:
                      enabled: true
                      chartName: cert-manager
                      namespace: cert-manager
                      releaseName: cert-manager
                      defaultVersion: "1.17.2"
                      chartRepository: https://charts.jetstack.io
                      valuesObject:
                        installCRDs: true
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    keycloak:
                      enabled: true
                      chartName: keycloak
                      namespace: keycloak
                      releaseName: keycloak
                      defaultVersion: "24.7.3"
                      chartRepository: https://charts.bitnami.com/bitnami
                      valuesObject:
                        httpRelativePath: '/{{ if eq .metadata.annotations.pathRouting "true" }}keycloak/{{ end }}'
                        ingress:
                          hostname: '{{ if eq .metadata.annotations.pathRouting "false" }}keycloak.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}{{ end }}'
                          annotations:
                            cert-manager.io/cluster-issuer: '{{ if eq .metadata.annotations.pathRouting "false" }}letsencrypt-{{ .metadata.annotations.letsencryptEnv }}{{ end }}'
                          extraTls:
                            - hosts:
                                - '{{ if eq .metadata.annotations.pathRouting "false" }}keycloak.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}{{ end }}'
                              secretName: keycloak-server-tls
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    backstage:
                      enabled: true
                      chartName: backstage
                      namespace: backstage
                      releaseName: backstage
                      defaultVersion: "2.6.0"
                      chartRepository: https://backstage.github.io/charts
                      valuesObject:
                        ingress:
                          host: '{{ if eq .metadata.annotations.pathRouting "false" }}backstage.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}{{ end }}'
                          annotations:
                            cert-manager.io/cluster-issuer: '{{ if eq .metadata.annotations.pathRouting "false" }}letsencrypt-{{ .metadata.annotations.letsencryptEnv }}{{ end }}'
                        backstage:
                          appConfig:
                            catalog:
                              locations:
                                - type: url
                                  target: "{{ .metadata.annotations.addonsRepoURL }}/blob/{{ .metadata.annotations.addonsRepoRevision }}/templates/backstage/catalog-info.yaml"
                          extraEnvVars:
                            - name: BACKSTAGE_FRONTEND_URL
                              value: 'https://{{ if eq .metadata.annotations.pathRouting "false" }}backstage.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}{{ end }}'
                            - name: KEYCLOAK_NAME_METADATA
                              value: 'https://{{ if eq .metadata.annotations.pathRouting "false" }}keycloak.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}/keycloak{{ end }}/realms/cnoe/.well-known/openid-configuration'
                            - name: ARGO_WORKFLOWS_URL
                              value: 'https://{{ if eq .metadata.annotations.pathRouting "false" }}argo-workflows.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}/argo-workflows{{ end }}'
                            - name: ARGO_CD_URL
                              value: 'https://{{ if eq .metadata.annotations.pathRouting "false" }}argocd.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}/argocd{{ end }}'
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    argo-workflows:
                      enabled: true
                      chartName: argo-workflows
                      namespace: argo
                      releaseName: argo-workflows
                      defaultVersion: "0.45.18"
                      chartRepository: https://argoproj.github.io/argo-helm
                      valuesObject:
                        server:
                          baseHref: '/{{ if eq .metadata.annotations.pathRouting "true" }}argo-workflows/{{ end }}'
                          sso:
                            issuer: '{{ if eq .metadata.annotations.pathRouting "true" }}https://{{ .metadata.annotations.domain }}/keycloak{{ else }}https://keycloak.{{ .metadata.annotations.domain }}{{ end }}/realms/cnoe'
                            redirectUrl: '{{ if eq .metadata.annotations.pathRouting "true" }}https://{{ .metadata.annotations.domain }}/argo-workflows{{ else }}https://argo-workflows.{{ .metadata.annotations.domain }}{{ end }}/oauth2/callback'
                          ingress:
                            annotations:
                              cert-manager.io/cluster-issuer: '{{ if eq .metadata.annotations.pathRouting "false" }}letsencrypt-{{ .metadata.annotations.letsencryptEnv }}{{ end }}'
                              nginx.ingress.kubernetes.io/rewrite-target: '{{ if eq .metadata.annotations.pathRouting "true" }}/$2{{ end }}'
                            hosts:
                              - '{{ if eq .metadata.annotations.pathRouting "true" }}{{ .metadata.annotations.domain }}{{ else }}argo-workflows.{{ .metadata.annotations.domain }}{{ end }}'
                            paths:
                              - '/{{ if eq .metadata.annotations.pathRouting "true" }}argo-workflows(/|$)(.*){{ end }}'
                            tls:
                              - hosts:
                                  - '{{ if eq .metadata.annotations.pathRouting "true" }}{{ .metadata.annotations.domain }}{{ else }}argo-workflows.{{ .metadata.annotations.domain }}{{ end }}'
                                secretName: argo-workflows-server-tls
                      selector:
                        matchExpressions:
                          - key: environment
                            operator: In
                            values:
                              - control-plane
                    syncPolicy:
                      automated:
                        selfHeal: true
                        allowEmpty: true
                        prune: false
                      retry:
                        limit: -1
                        backoff:
                          duration: 5s
                          factor: 2
                          maxDuration: 10m
                      syncOptions:
                        - CreateNamespace=true
                        - ServerSideApply=true
                    syncPolicyAppSet:
                      preserveResourcesOnDeletion: false
                    annotations:
                      addonsRepoURL: ""
                      addonsRepoRevision: ""
                      addonsRepoBasepath: ""
                      subscription: ""
                      location: ""
                      resourceGroup: ""
                      tenantId: ""
                      clusterName: ""
                      clusterOIDCIssuerURL: ""
                      domain: ""
                      keyvault: ""
                      pathRouting: ""
                      letsencryptEnv: ""
                      crossplaneClientId: ""
                      crossplaneTenantId: ""
                      environment: control-plane
                    repoURLGit: ""
                    repoURLGitRevision: ""
                    repoURLGitBasePath: ""
                    pathRouting: ""
                    letsencryptEnv: ""
                    podSecurityPolicy:
                      enabled: false
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.appsetChartName
                toFieldPath: spec.forProvider.chart.name
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.appsetChartRepository
                toFieldPath: spec.forProvider.chart.repository
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.appsetChartVersion
                toFieldPath: spec.forProvider.chart.version
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoUrl
                toFieldPath: spec.forProvider.values.repoURLGit
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoRevision
                toFieldPath: spec.forProvider.values.repoURLGitRevision
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoBasePath
                toFieldPath: spec.forProvider.values.repoURLGitBasePath
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.pathRouting
                toFieldPath: spec.forProvider.values.pathRouting
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.letsencryptEnv
                toFieldPath: spec.forProvider.values.letsencryptEnv
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoUrl
                toFieldPath: spec.forProvider.values.annotations[addonsRepoURL]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoRevision
                toFieldPath: spec.forProvider.values.annotations[addonsRepoRevision]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.repoBasePath
                toFieldPath: spec.forProvider.values.annotations[addonsRepoBasepath]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.subscriptionId
                toFieldPath: spec.forProvider.values.annotations[subscription]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.location
                toFieldPath: spec.forProvider.values.annotations[location]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.resourceGroup
                toFieldPath: spec.forProvider.values.annotations[resourceGroup]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.tenantId
                toFieldPath: spec.forProvider.values.annotations[tenantId]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clientId
                toFieldPath: spec.forProvider.values.annotations[crossplaneClientId]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.tenantId
                toFieldPath: spec.forProvider.values.annotations[crossplaneTenantId]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterName
                toFieldPath: spec.forProvider.values.annotations[clusterName]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.clusterOidcIssuerUrl
                toFieldPath: spec.forProvider.values.annotations[clusterOIDCIssuerURL]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.domain
                toFieldPath: spec.forProvider.values.annotations[domain]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.keyVaultName
                toFieldPath: spec.forProvider.values.annotations[keyvault]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.pathRouting
                toFieldPath: spec.forProvider.values.annotations[pathRouting]
              - type: FromCompositeFieldPath
                fromFieldPath: spec.parameters.letsencryptEnv
                toFieldPath: spec.forProvider.values.annotations[letsencryptEnv]
