# Ref: https://github.com/backstage/charts/tree/main/charts/backstage
ingress:
  enabled: true
  className: "nginx"
  extraHosts: []
  path: "/"
  tls:
    enabled: true
    secretName: "backstage-server-tls"
  annotations:
    external-dns.alpha.kubernetes.io/ttl: "60"
backstage:
  replicas: 1
  image:
    registry: ghcr.io
    repository: cnoe-io/backstage-app
    tag: 135c0cb26f3e004a27a11edb6a4779035aff9805
    pullPolicy: IfNotPresent
  # command: ["node", "packages/backend"]
  command: ["/app/startup.sh"]
  args: []
  extraEnvVars:
    - name: NODE_TLS_REJECT_UNAUTHORIZED
      value: "0"
  extraEnvVarsSecrets:
    - backstage-env-vars
  extraVolumeMounts:
    - name: backstage-config
      mountPath: "/app/config"
      readOnly: true
    - name: startup-script
      mountPath: /app/startup.sh
      subPath: startup.sh
    - name: startup-script
      mountPath: /app/unlock.js
      subPath: unlock.js
  extraVolumes:
    - name: backstage-config
      projected:
        sources:
          - secret:
              name: integrations
              items:
                - key: github-integration.yaml
                  path: github-integration.yaml
          - secret:
              name: k8s-config
              items:
                - key: k8s-config.yaml
                  path: k8s-config.yaml
    - name: startup-script
      configMap:
        name: backstage-startup-script
        defaultMode: 0755
  appConfig:
    app:
      title: CNOE Backstage
      baseUrl: ${BACKSTAGE_FRONTEND_URL}
    organization:
      name: CNOE
    backend:
      baseUrl: ${BACKSTAGE_FRONTEND_URL}
      csp:
        connect-src: ["self", "http:", "https:"]
      cors:
        origin: ${BACKSTAGE_FRONTEND_URL}
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          # Migration-specific settings
          migrations:
            tableName: "knex_migrations"
            lockTableName: "knex_migrations_lock"
            # Add timeout for migration lock
            migrationTimeout: 120000 # 2 minutes
      cache:
        store: memory
    integrations:
      github:
        - host: github.com
          apps:
            - $include: /app/config/github-integration.yaml
    proxy:
      "/argo-workflows/api":
        target: ${ARGO_WORKFLOWS_URL}
        changeOrigin: true
        secure: true
        headers:
          Authorization:
            $env: ARGO_WORKFLOWS_AUTH_TOKEN
      "/argocd/api":
        target: ${ARGO_CD_URL}
        changeOrigin: true
        headers:
          Cookie:
            $env: ARGOCD_AUTH_TOKEN
    techdocs:
      builder: "local"
      generator:
        runIn: "docker"
      publisher:
        type: "local"
    auth:
      environment: development
      session:
        secret: "MW2sV-sIPngEl26vAzatV-6VqfsgAx4bPIz7PuE_2Lk="
      providers:
        keycloak-oidc:
          development:
            metadataUrl: ${KEYCLOAK_NAME_METADATA}
            clientId: backstage
            clientSecret: ${BACKSTAGE_CLIENT_SECRET}
            additionalScopes: "openid profile email groups"
            prompt: auto
            skipIssuerCheck: true
            httpOptions:
              rejectUnauthorized: false
              checkServerIdentity: false
    scaffolder:
    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
    kubernetes:
      serviceLocatorMethod:
        type: multiTenant
      clusterLocatorMethods:
        - $include: /app/config/k8s-config.yaml
    argocd:
      username: admin
      password: ${ARGOCD_ADMIN_PASSWORD}
      appLocatorMethods:
        - type: "config"
          instances:
            - name: in-cluster
              url: ${ARGO_CD_URL}
              username: admin
              password: ${ARGOCD_ADMIN_PASSWORD}
    argoWorkflows:
      baseUrl: ${ARGO_WORKFLOWS_URL}
postgresql:
  enabled: true
  auth:
    username: "backstage"
    existingSecret: "backstage-env-vars"
    secretKeys:
      adminPasswordKey: POSTGRES_PASSWORD
      userPasswordKey: POSTGRES_PASSWORD
  architecture: standalone
serviceAccount:
  create: true
extraDeploy:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: backstage-startup-script
      namespace: "{{ .Release.Namespace }}"
    data:
      unlock.js: |
        module.exports = {
          client: 'pg',
          connection: {
            host: process.env.POSTGRES_HOST,
            port: process.env.POSTGRES_PORT,
            user: process.env.POSTGRES_USER,
            password: process.env.POSTGRES_PASSWORD,
            database: process.env.POSTGRES_DB
          },
          migrations: {
            tableName: 'knex_migrations'
          }
        };
      startup.sh: |
        #!/bin/bash
        set -e

        echo "Starting Backstage with knex migrate:unlock..."

        cd /app
        # Try to unlock migrations using various methods
        npx knex migrate:unlock --knexfile=/app/unlock.js || echo "Unlock completed"

        echo "Migration unlock attempts completed. Starting Backstage..."

        # Start the original Backstage process
        exec node packages/backend --config /app/app-config-from-configmap.yaml
