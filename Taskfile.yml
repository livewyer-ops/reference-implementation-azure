# https://taskfile.dev

version: "3"

set: [errexit, nounset, pipefail]

env:
  KUBECONFIG: "{{.ROOT_DIR}}/private/kubeconfig"
  REPO_ROOT: "{{.ROOT_DIR}}"
  KEYVAULT_NAME:
    sh: yq '.keyvault // "cnoe-ref-impl"' config.yaml

tasks:
  init:
    deps:
      - update:kubeconfig
    cmds:
      - defer: { task: cleanup }
      - task: helmfile:init
      - task: helmfile:lint
      - task: helmfile:build

  install:
    deps:
      - update:kubeconfig
    cmds:
      - defer: { task: cleanup }
      - task: helmfile
      - task: update

  sync:
    deps:
      - update:kubeconfig
    cmds:
      - defer: { task: cleanup }
      - task: helmfile:sync
      - task: update

  update:
    deps:
      - update:kubeconfig
    cmds:
      - defer: { task: cleanup }
      - task: update:secret
      - task: update:crossplane

  update:secret:
    deps:
      - update:kubeconfig
    preconditions:
      - yq 'true' private/azure-credentials.yaml
    cmds:
      - defer: { task: cleanup }
      - kubectl apply -f packages/bootstrap/crossplane-ns.yaml
      - kubectl apply -f private/azure-credentials.yaml
      - task: update:secret:azure
      - task: wait
        vars:
          CONDITION: $(kubectl get ns | grep external-dns | wc -l) -eq 0
      - task: wait
        vars:
          CONDITION: $(az identity show --resource-group cnoe-idp --name external-dns 2>/dev/null | wc -l) -eq 0
      - task: update:secret:external-dns

  # NOTE: THIS IS NOT IDEAL
  # TODO: move this task to manifest or use other method to manage
  update:secret:external-dns:
    deps:
      - update:kubeconfig
    preconditions:
      - yq 'true' config.yaml
    env:
      SUBSCRIPTION_ID:
        sh: yq '.subscription' config.yaml
      RESOURCE_GROUP:
        sh: yq '.resource_group' config.yaml
      TENANT_ID:
        sh: az identity show --resource-group ${RESOURCE_GROUP} --name external-dns --query "tenantId" --output tsv
      CLIENT_ID:
        sh: az identity show --resource-group ${RESOURCE_GROUP} --name external-dns --query "clientId" --output tsv
    vars:
      SECRET_TEMP:
        sh: mktemp
    sources:
      - config.yaml
    generates:
      - "{{.SECRET_TEMP}}"
    cmds:
      - defer: rm -f {{.SECRET_TEMP}}
      - cmd: yq --null-input -o=json '.aadClientId = env(CLIENT_ID) | .tenantId = strenv(TENANT_ID) | .subscriptionId = strenv(SUBSCRIPTION_ID) | .resourceGroup = strenv(RESOURCE_GROUP) | .useWorkloadIdentityExtension = true' > {{.SECRET_TEMP}}
      - kubectl create secret generic external-dns-azure --namespace external-dns --from-file='azure.json'={{.SECRET_TEMP}}

  update:secret:azure:
    preconditions:
      - yq 'true' config.yaml
    vars:
      TAGS:
        sh: yq eval '.tags | to_entries | map("Key=" + .key + ",Value=" + .value) | join(" ")' config.yaml
      SECRET_TEMP:
        sh: mktemp
      KUBELET_IDENTITY_OBJECT_ID:
        sh: az aks show --name $(yq '.cluster_name' config.yaml) --resource-group $(yq '.resource_group' config.yaml) --query 'identityProfile.kubeletidentity.objectId' -o tsv
    sources:
      - config.yaml
    generates:
      - "{{.SECRET_TEMP}}"
    cmds:
      - task: if
        vars:
          CONDITION: $(az keyvault list -o yaml | KEYVAULT_NAME=${KEYVAULT_NAME} yq '.[] | [select(.name==env(KEYVAULT_NAME))] | length') -eq 0
          RUN: az keyvault create --resource-group $(yq '.resource_group' config.yaml) --enable-rbac-authorization --tags {{.TAGS}} ${KEYVAULT_NAME}
      - defer: rm -f {{.SECRET_TEMP}}
      - yq -o=json config.yaml > {{.SECRET_TEMP}}
      - |
        az keyvault secret set \
          --name config \
          --vault-name ${KEYVAULT_NAME} \
          --file {{.SECRET_TEMP}} \
          --description "Secret for config of CNOE Azure Reference Implementation" \
          --tags {{.TAGS}} \
          --output yaml | yq 'del(.value)'

  update:crossplane:
    deps:
      - update:kubeconfig
    cmds:
      - defer: { task: cleanup }
      - task: wait
        vars:
          CONDITION: $(kubectl get provider.pkg.crossplane.io -o yaml | yq '[.items[] | select(.metadata.name=="*provider-kubernetes")] | length') -eq 0
      - task: wait
        vars:
          CONDITION: $(kubectl -n crossplane-system get sa -o name | grep provider-kubernetes | wc -l) -eq 0
      - task: if
        vars:
          CONDITION: $(kubectl get clusterrolebindings -o yaml | yq '[.items[] | select(.metadata.name=="provider-kubernetes-admin-binding")] | length') -eq 0
          RUN: kubectl create clusterrolebinding provider-kubernetes-admin-binding --clusterrole cluster-admin --serviceaccount="$(kubectl -n crossplane-system get sa -o yaml | yq '.items[] | select(.metadata.name=="*provider-kubernetes*") | [.metadata.namespace, .metadata.name] | join(":")')"

  update:kubeconfig:
    preconditions:
      - yq 'true' config.yaml
    cmds:
      - az aks get-credentials --name $(yq '.cluster_name' config.yaml) --resource-group $(yq '.resource_group' config.yaml) --overwrite-existing

  cleanup:
    internal: true
    cmds:
      - cmd: rm -f "{{.KUBECONFIG}}"
        ignore_error: true

  wait:
    internal: true
    env:
      WAIT_TIMEOUT: "{{default 300 .TIMEOUT}}"
    cmds:
      - while [[ {{.CONDITION}} ]] && [[ ${WAIT_TIMEOUT} -gt 0 ]]; do sleep 5 && ((WAIT_TIMEOUT-=5)); done && exit 0 || exit 1

  if:
    internal: true
    cmds:
      - if [[ {{.CONDITION}} ]]; then {{.RUN}}; fi

  uninstall:
    deps:
      - update:kubeconfig
    cmds:
      - defer: { task: cleanup }
      - kubectl delete workloadidentities.azure.livewyer.io -A --all --interactive=false --now
      - task: wait
        vars:
          CONDITION: true
          TIMEOUT: 30
      - kubectl delete pkg --all --interactive=false --now
      - kubectl delete appset -A --all --interactive=false --now
      - kubectl delete app -A --all --interactive=false --now --cascade=orphan
      - task: wait
        vars:
          CONDITION: true
          TIMEOUT: 30
      - task: helmfile:destroy
      - cmd: kubectl delete ns {{.ITEM}} --interactive=false --now --cascade=orphan
        for: { var: NS }
    vars:
      NS:
        sh: yq 'to_entries[] | select(.value.enabled==true).value.namespace' packages/addons/values.yaml
    ignore_error: true

  test:aks:create:
    env:
      KUBECONFIG:
        sh: echo ${HOME}/.kube/config
    preconditions:
      - yq 'true' config.yaml
    cmds:
      - |
        az aks create \
          --name $(yq '.cluster_name' config.yaml) \
          --location $(yq '.location' config.yaml) \
          --resource-group $(yq '.resource_group' config.yaml) \
          --kubernetes-version ${AKS_VERSION:-1.33} \
          --sku base \
          --enable-oidc-issuer \
          --enable-workload-identity \
          --node-vm-size ${AKS_NODE_SIZE:-standard_d4alds_v6} \
          --output none \
          {{.CLI_ARGS}}
      - az aks get-credentials --name $(yq '.cluster_name' config.yaml) --resource-group $(yq '.resource_group' config.yaml) --overwrite-existing
      - task: test:config:update
        vars:
          OIDC_ISSUER:
            sh: az aks show --name $(yq '.cluster_name' config.yaml) --resource-group $(yq '.resource_group' config.yaml) --query "oidcIssuerProfile.issuerUrl" -o tsv

  test:config:update:
    preconditions:
      - yq 'true' config.yaml
    cmds:
      - yq -i e '.cluster_oidc_issuer_url |= "{{.OIDC_ISSUER}}"' config.yaml

  test:aks:destroy:
    preconditions:
      - yq 'true' config.yaml
    cmds:
      - az aks delete --name $(yq '.cluster_name' config.yaml) --resource-group $(yq '.resource_group' config.yaml) --yes {{.CLI_ARGS}}

  helmfile:
    cmds:
      - task: helmfile:init
      - task: helmfile:apply
  helmfile:init:
    cmds:
      - helmfile init {{.CLI_ARGS}}
  helmfile:lint:
    cmds:
      - helmfile lint {{.CLI_ARGS}}
  helmfile:diff:
    cmds:
      - helmfile diff {{.CLI_ARGS}}
  helmfile:build:
    cmds:
      - helmfile build {{.CLI_ARGS}}
  helmfile:apply:
    cmds:
      - helmfile apply {{.CLI_ARGS}}
  helmfile:list:
    cmds:
      - helmfile list {{.CLI_ARGS}}
  helmfile:status:
    cmds:
      - helmfile status {{.CLI_ARGS}}
  helmfile:template:
    cmds:
      - helmfile template {{.CLI_ARGS}}
  helmfile:deps:
    cmds:
      - helmfile deps {{.CLI_ARGS}}
  helmfile:sync:
    cmds:
      - helmfile sync {{.CLI_ARGS}}
  helmfile:destroy:
    cmds:
      - helmfile destroy {{.CLI_ARGS}}
